# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p4N_2l3e82uriEp6gnOwS37XNuh5bcAf

# <----------------------Data Collection-------------------------->
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("gunavenkatdoddi/eye-diseases-classification")

print("Path to dataset files:", path)

"""# <------------------importing the Libraries---------------------------------->"""

import numpy as np
import pathlib
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
# Import preprocess_input from the specific model or imagenet_utils
from tensorflow.keras.applications.vgg19 import preprocess_input
# For VGG19
from tensorflow.keras.applications.vgg19 import VGG19

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dropout, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import plot_model
from sklearn.metrics import classification_report, confusion_matrix

batch_size = 64

"""# <-------------------------------------------------Creating Training and testing data -------------------->"""

import os
import shutil
import random

# Define paths
dataset_dir = "//root/.cache/kagglehub/datasets/gunavenkatdoddi/eye-diseases-classification/versions/1/dataset"  # Change this to your actual dataset path
train_dir = "train_data"
test_dir = "test_data"

# Define train-test split ratio
split_ratio = 0.2  # 20% test, 80% train

# Create train and test folders
os.makedirs(train_dir, exist_ok=True)
os.makedirs(test_dir, exist_ok=True)

# Iterate over each class
for class_name in os.listdir(dataset_dir):
    class_path = os.path.join(dataset_dir, class_name)
    if not os.path.isdir(class_path):
        continue

    # Create class subfolders inside train & test
    os.makedirs(os.path.join(train_dir, class_name), exist_ok=True)
    os.makedirs(os.path.join(test_dir, class_name), exist_ok=True)


    images = [img for img in os.listdir(class_path) if img.endswith(('.jpg', '.png', '.jpeg'))]
    random.shuffle(images)


    split_idx = int(len(images) * (1 - split_ratio))
    train_images = images[:split_idx]
    test_images = images[split_idx:]


    for img in train_images:
        shutil.move(os.path.join(class_path, img), os.path.join(train_dir, class_name, img))

    for img in test_images:
        shutil.move(os.path.join(class_path, img), os.path.join(test_dir, class_name, img))

print("✅ Data successfully split into training and testing folders!")

"""# <----------------------------------ImageDataGenerator on training and test data-------------------->"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.vgg19 import preprocess_input

# Train data generator (with augmentations)
train_datagen = ImageDataGenerator(
    preprocessing_function=preprocess_input,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    zoom_range=0.2,
    brightness_range=[0.8, 1.2],
    vertical_flip=True,
    horizontal_flip=True
)

# Test data generator (only preprocessing, no augmentations)
test_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

# Load Train Data
train_data = train_datagen.flow_from_directory(
    "/content/train_data",
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True
)

# Tested Data
test_data = test_datagen.flow_from_directory(
    "/content/test_data",
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False
)

print("✅ Train & Test Data Successfully Loaded!")

"""# <--------    Pretrained CNN model Vgg19----------------------->




"""

import tensorflow as tf
from tensorflow.keras.applications import VGG19  # You can also use ResNet50, MobileNetV2, etc.
from tensorflow.keras.layers import Flatten, Dense, Dropout

#  pretrained Model (Feature Extractor)
base_model = VGG19(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# freezing pof Aal convolutional Layers
for layer in base_model.layers:
    layer.trainable = False

"""#<----------Adding Dense Layer-------------->"""

from tensorflow.keras.models import Model
# Add Custom Fully Connected Layers
x = Flatten()(base_model.output)  # Convert feature maps into 1D vector
x = Dense(512, activation='relu')(x)
x = Dropout(0.5)(x)  # Prevents overfitting
x = Dense(256, activation='relu')(x)
x = Dropout(0.3)(x)
outputs = Dense(4, activation='softmax')(x)  # Change '4' to match the number of classes & assign to outputs

# Define the Model
model = Model(inputs=base_model.input, outputs=outputs) # Pass outputs to the Model function

"""# <-----------Configure the learning process : Compilation------>"""

# Compile the Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Model Summary
model.summary()

"""#<------------------Training the model-------------->"""

# Train the Model
history = model.fit(
    train_data,
    validation_data=test_data,
    epochs=50,
    steps_per_epoch=len(train_data),
    validation_steps=len(test_data)

)

model.save('eye_vgg19.h5')

model = tf.keras.models.load_model("eye_vgg19.h5")

class_names = ['cataract', 'diabetic_retinopathy', 'glaucoma', 'normal']

from tensorflow.keras.preprocessing import image
def eye_diseaes(image_path):
    img = tf.keras.utils.load_img(image_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    # Make predictions
    predictions = model.predict(img_array)

    # Get the index of the class with the highest predicted probability
    predicted_index = np.argmax(predictions, axis=1)[0]
    predicted_class = class_names[predicted_index]
    confidence = predictions[0][predicted_index]

    return predicted_class, confidence

image_path = "/content/train_data/glaucoma/1209_left.jpg"
predicted_class, confidence = eye_diseaes(image_path)
print("predicted sisease:", predicted_class)
print("Confidence:", confidence)

image_path = "/content/train_data/normal/1034_right.jpg"
predicted_class, confidence = eye_diseaes(image_path)
print("predict sisease:", predicted_class)
print("Confidence:", confidence)

